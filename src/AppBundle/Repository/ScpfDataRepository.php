<?php

namespace AppBundle\Repository;

/**
 * ScpfDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScpfDataRepository extends \Doctrine\ORM\EntityRepository
{
	public function findByDateOpenAcc()
	{	
    	//достаем из таблицы даты открытия счета для юр.лиц.
    	$query = $this->getEntityManager()->createQuery(
    		"SELECT u.dateopen 
    		 FROM AppBundle:ScpfData u 
    		 JOIN u.idClid a 
    		 WHERE a.forma = 'JUR'");
    	$dateOpen = $query->getScalarResult();
    	//преабразуем чтоб даты были уникальны в выведеном результате 
    	//для дальнейшего использования на графике (на оси Х)
    	$dateO = array();
		foreach($dateOpen as $do){
  			$dateO = array_merge($dateO,array_values($do));
		}
		$res = array_unique($dateO); //массив дат открытия счетов
		
		$dateO = array();
		foreach ($res as $d) {
			$a = explode('.', $d);
			list($a[0], $a[2]) = array($a[2], $a[0]);
			$dateO[] = implode('-', $a);
		}
		return $dateO;
	}

	public function findByDateCloseAcc()
	{
		//достаем из таблицы даты закрытия счета для юр.лиц.
    	$query2 = $this->getEntityManager()->createQuery(
    		"SELECT u.dateclose FROM AppBundle:ScpfData u JOIN u.idClid a WHERE a.forma = 'JUR'");
    	$dateClose = $query2->getScalarResult();
    	//преабразуем чтоб даты были уникальны в выведеном результате 
    	//для дальнейшего использования на графике (на оси Х)
    	$dateC = array();
		foreach($dateClose as $dc){
  			$dateC = array_merge($dateC,array_values($dc));
		}
		$res2 = array_unique($dateC); //массив дат закрытия счетов
		array_shift($res2);
		$dateC = array();
    		foreach ($res2 as $d) {
    			$a = explode('.', $d);
    			list($a[0], $a[2]) = array($a[2], $a[0]);
    			$dateC[] = implode('-', $a);
    		}
            
    	return $dateC;
    }

    public function findByQuantityOpenAcc()
    {
		//достаем массив значений счетов, которые были открыты (по датам)
		$query3 = $this->getEntityManager()->createQuery(
    		"SELECT count(u.id) 
    		 FROM AppBundle:ScpfData u 
    		 JOIN u.idClid a 
    		 WHERE a.forma = 'JUR' 
    		 GROUP BY u.dateopen");
    	$quantityOpen = $query3->getScalarResult();
    	//преобразуем массив значение количества открытых счетов для дальнейшего отображения на графике
    	$quantityO = array();
		foreach($quantityOpen as $qo){
  			$quantityO = array_merge($quantityO,array_values($qo));
		}
		$quantityO = array_unique($quantityO); //массив с количеством откр. счетов по датам
		$quantityOstr = implode(",", $quantityO); //строка с количеством откр счетов через запятую
		return $quantityOstr;
    }

    public function findByQuantityCloseAcc()
    {
		//достаем массив значений счетов, которые были закрыты по датам
		$query4 = $this->getEntityManager()->createQuery(
    		"SELECT count(u.id) 
    		 FROM AppBundle:ScpfData u 
    		 JOIN u.idClid a 
    		 WHERE a.forma = 'JUR' 
    		 GROUP BY u.dateclose");
    	$quantityClose = $query4->getScalarResult();
    	//преобразуем массив значение количества закрытых счетов для дальнейшего отображения на графике
    	$quantityC = array();
    	$quantityCC = array();
    	$i = 0;
		foreach($quantityClose as $qc){
  			$quantityC = array_merge($quantityC,array_values($qc));
		}
		$quantityC = array_unique($quantityC); 
		foreach ($quantityC as $qq) {
			$quantityCC[$i] = $qq * (-1);
			$i++;
		}
		array_shift($quantityCC); //массив с количеством закр. счетов по датам    со знаком минус без первого эл-та
		return $quantityCC;
    }


}
